// index.js - 証明書認証 + CloudAdapter + / エンドポイント対応版

const fs = require('fs');
const path = require('path');
const express = require('express');
const { CloudAdapter, ConfigurationBotFrameworkAuthentication } = require('botbuilder');
const GLJTeamsBot = require('./teamsBot');
const redisClient = require('./redisClient');
const logger = require('./logger');
require('./appInsights');

try {
  const app = express();
  const PORT = process.env.PORT || 3978;

  // 証明書ログ出力
  const certPath = process.env.MicrosoftAppCertificateFile;
  const certThumbprint = process.env.MicrosoftAppCertificateThumbprint;
  const certPassword = process.env.MicrosoftAppCertificatePassword || '';

  logger.info(`📁 証明書パス: ${certPath}`);
  logger.info(`🔑 拇印: ${certThumbprint}`);
  logger.info(`🔐 パスワード: ${certPassword === '' ? '(空文字)' : '(マスク済み)'}`);
  logger.info(`📄 証明書ファイルの存在確認: ${fs.existsSync(certPath)}`);
  logger.info('🔐 証明書認証を使用中');

  const privateKey = fs.readFileSync(certPath);
  logger.info(`✅ fs.readFileSync 成功。バイト長: ${privateKey.length}`);

  // Bot Framework 認証（証明書対応）
  const botFrameworkAuthentication = new ConfigurationBotFrameworkAuthentication(process.env);
  const adapter = new CloudAdapter(botFrameworkAuthentication);

  adapter.onTurnError = async (context, error) => {
    logger.error(`❌ [onTurnError] ${error}`);
    await context.sendActivity('エラーが発生しました。しばらくしてからもう一度お試しください。');
  };

  // Bot のインスタンス生成
  const bot = new GLJTeamsBot(redisClient);

  // ✅ Azure 側の startup probe 向けルート
  app.get('/', (req, res) => {
    res.status(200).send('Bot is running.');
  });

  // メッセージ受信エンドポイント
  app.post('/api/messages', express.json(), async (req, res) => {
    await adapter.process(req, res, async (context) => {
      await bot.run(context);
    });
  });

  app.listen(PORT, () => {
    logger.info(`🟢 サーバー起動中：http://localhost:${PORT}`);
  });

} catch (err) {
  console.error('❌ Fatal error on startup:', err);
  process.exit(1);
}

